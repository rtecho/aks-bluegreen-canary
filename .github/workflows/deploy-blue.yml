# This is a basic workflow to help you get started with Actions

name: Deploy blue

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
#permissions:
#  id-token: write
#  contents: read

env:
  ACR_NAME: rtcorpacr.azurecr.io
  ACR_REPO_NAME: rtcorpacr.azurecr.io/blue-nginx
  ARTIFACT_NAME: 1
  RESOURCE_GROUP: rtcorp-aks-main_group
  AKS_CLUSTER_NAME: rtcorp-aks-main
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deployapp:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # This action can be used to set cluster context before other actions like azure/k8s-deploy, azure/k8s-create-secret or any kubectl commands (in script) can be run subsequently in the workflow.
      - name: Set cluster context
        uses: azure/aks-set-context@v1
        with:
       #   client-id: ${{ secrets.AZURE_CLIENT_ID }}
       #   tenant-id: ${{ secrets.AZURE_TENANT_ID }}
       #   subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
          resource-group: ${{ env.RESOURCE_GROUP }}
      
      # Runs a set of commands using the runners shell
      - name: Deploy app
        uses: azure/k8s-deploy@v1.3
        with:
          namespace: default
          manifests: |
            ./kubernetes/service.yaml
            ./kubernetes/blue-deploy.yaml
          images: |
            rtcorpacr.azurecr.io/blue-nginx:1
          strategy: blue-green
          traffic-split-method: pod
          action: deploy  #deploy is the default; we will later use this to promote/reject
